{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017/workflow-com-git","result":{"data":{"markdownRemark":{"id":"42835fa6-1c02-51f4-947f-2ec4dc892bad","html":"<p>Existem diversos padrões e estruturações quando se trata de versionamento de código com git. Um <em>worflow</em> que tem sido muito utilizado pela comunidade é o <em>Feature Branch Workflow</em>, que basicamente diz que cada nova funcionalidade do sistema (ou correção de bugs) deve ter uma nova <em>branch</em>, ao invés de ser trabalhada na <em>branch master</em>, o que encoraja vários desenvolvedores trabalharem na nova funcionalidade e diminui as chances de ocorrer código quebrado na <em>branch</em> principal. Esse worflow melhora a comunicação entre a equipe graças a <em>code reviews</em> pelos <em>pull requests</em>, tornando o ambiente de trabalho mais interativo e comunicativo, para se aprofundar nesse assunto recomendo o artigo da Atlassian <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Feature branch workflow</a> (Spoiler, conteúdo em Inglês).</p>\n<p>Outro conceito bem interessante é utilizar o <em>rebasing</em> quando for oportuno, já que ele melhora a visão como um todo das mudanças realizadas na <em>master</em> enquanto você estava criando sua nova funcionalidade. O <em>rebase</em> funciona da seguinte forma, diferente do merge que ele realiza um <em>commit</em> para introduzir as mudanças de uma branch em outra, o <em>rebase</em> traz os <em>commits</em> para o histórico da branch que está recebendo, mas ele deve ser utilizado com cuidado como dito no artigo também da Atlassian <a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golden Rule of Rebasing</a> (Spoiler, conteúdo em Inglês).</p>\n<p>Assim, esses dois conceitos juntos com o <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gitflow</a> (Spoiler, conteúdo em Inglês), que melhora a organização da <em>master</em> para realizar lançamento de atualizações, nomeando <em>branch</em> de desenvolvimento e utilizando <em>tags</em> para numeração de versões da <em>master</em>.</p>\n<p>Os principais passos para elucidar esses conceitos em formato prático, são os seguintes:</p>\n<ul>\n<li>\n<p>Criar uma <em>branch</em> com uma nova funcionalidade ou correção de bugs</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout -b &lt;nomeDaBranch></code></pre></div>\n</li>\n<li>\n<p>Fazer mudanças</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git add\ngit commit -m \"descrição das mudanças\"</code></pre></div>\n</li>\n<li>\n<p>Sincronizar com as mudanças do servidor, caso você as tenha perdido</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout develop\ngit pull</code></pre></div>\n</li>\n<li>\n<p>Atualizar a sua <em>branch</em> com as últimas mudanças da <em>branch</em> de desenvolvimento utilizando <em>interactive rebase</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout &lt;nomeDaBranch>\ngit rebase -i develop</code></pre></div>\n</li>\n<li>\n<p>Caso você possua conflitos, resolva eles (<a href=\"https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aqui como</a> (Spoiler, conteúdo em Inglês)) e continue o seu <em>rebase</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\ngit rebase --continue</code></pre></div>\n</li>\n<li>\n<p>Atualize a sua <em>branch</em>. Como o <em>rebase</em> modifica o histórico, você precisa utilizar o <code class=\"language-text\">-f</code> para forçar mudanças dentro da <em>branch</em> remota, caso você esteja trabalhando com mais pessoas nessa <em>branch</em>, use mudanças menos destrutivas através <code class=\"language-text\">--force-with-lease</code> (<a href=\"https://developer.atlassian.com/blog/2015/04/force-with-lease/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Explicação</a> (Spoiler, conteúdo em Inglês)).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push -f</code></pre></div>\n</li>\n<li>Faça um <em>Pull request</em></li>\n<li>Através do <em>Pull request</em> a equipe pode dar opiniões sobre a qualidade do código, utilizando <em>code reviews</em>, se bem implementado na equipe pode vir a ser muito util e motivador</li>\n<li>O <em>Pull request</em> vai ser aceito, realizado o <em>merge</em> e fechado pelo revisor</li>\n<li>Remover a sua <em>branch</em> local quando estiver finalizada</li>\n</ul>\n<h2 id=\"regras\" style=\"position:relative;\"><a href=\"#regras\" aria-label=\"regras permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regras</h2>\n<p>Existem cuidados com o git que devem ser mantidos em mente, para obedecer os conceitos do worflow e gerar menores problemas no uso do git:</p>\n<ul>\n<li>Realizar trabalho apenas na <em>branch</em> de novas funcionalidades.</li>\n<li>Criar <em>Pull requests</em> apenas para a <em>branch <code class=\"language-text\">develop</code></em></li>\n<li>Nunca realizar <em>push</em> diretamente para as <em>branch <code class=\"language-text\">develop</code></em> ou <em><code class=\"language-text\">master</code></em>.</li>\n<li>Atualizar sua <em>branch <code class=\"language-text\">develop</code></em> e fazer <em>rebase</em> antes de realizar o <em>push</em> da sua nova funcionalidade e criar um <em>pull request</em></li>\n<li>Resolver potenciais conflitos enquanto realiza o <em>rebase</em> e antes de criar um <em>pull request</em></li>\n<li>Deletar a <em>branch</em> local e remover a <em>branch</em> de novas funcionalidade antes de fazer o merge.</li>\n<li>Antes de fazer um <em>Pull request</em>, tenha certeza que a sua <em>branch</em> de nova funcionalidade compila normalmente e passa em todos os testes (incluso teste de estilo de código).</li>\n<li>Utilizar um gitignore apropriado para cada projeto, <a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">crio meus gitignore através desse link</a>.</li>\n<li>Proteja a sua <em>branch develop</em> e a sua <em>master</em> por permissões (No <a href=\"https://help.github.com/articles/about-protected-branches/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a> e <a href=\"https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bitbucket</a>).</li>\n<li>Escreva mensagens claras no <em>Commit</em>, tente alinhar as suas mensagens com o time, sempre observando se as suas mensagens estão claras iguais ao resto do time, talvez até sugerindo um padrão para melhorar a organização dos <em>commits</em>.</li>\n</ul>","fields":{"slug":"/posts/2017/workflow-com-git","tagSlugs":["/tag/git/"]},"frontmatter":{"date":"2017-07-20T19:38:04.000Z","description":"Existem diversos padrões e estruturações quando se trata de versionamento de código com git. Iremos então debater o feature branch workflow que está sendo tão utilizado.","tags":["Git"],"title":"Worflow com o Git - Sugestões de uso","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/2017/workflow-com-git"}}}