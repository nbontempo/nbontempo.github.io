{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2015/programacao-orientada-a-objetos-com-python","result":{"data":{"markdownRemark":{"id":"bba0a088-e910-5c6e-b9a3-d331d607ae00","html":"<p>Nesse guia você irá aprender os tipos fundamentais de python, funções e métodos, como definir uma classe, classes aninhadas, herança e exceções. Tudo o que é necessário para um bom inicio com python.</p>\n<h2 id=\"tipos-fundamentais\" style=\"position:relative;\"><a href=\"#tipos-fundamentais\" aria-label=\"tipos fundamentais permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos Fundamentais</h2>\n<p>Tudo em python funciona como se fosse um objeto, por exemplo, quando temos um inteiro em python ele é um objeto, mas esse objeto tem o tipo int. Então em uma definição de um objeto temos os seguintes atributos:</p>\n<ul>\n<li>Identificador</li>\n<li>Valor</li>\n<li>Tipo, todo objeto tem um tipo. O tipo ajuda a determinar que tipo de operações são possíveis com o objeto.</li>\n<li>Um ou mais bases. Uma base é similar a uma super classe.</li>\n</ul>\n<p>Exemplo:</p>\n<p><code class=\"language-text\">x = 2 >>> type(x) &lt;type ‘int’></code></p>\n<p>Primeiramente temos uma variável inteira criada. Dentro dessa variável temos outro objeto int o qual vamos explorar mais profundamente. Quando chamamos type, ele apenas retorna o atributo de <code class=\"language-text\">__class__</code>, como podemos ver abaixo:</p>\n<p><code class=\"language-text\">type(type(x)) &lt;type ‘type’></code></p>\n<p>E como podemos ver, o objeto int é um objeto type, além disso, o atributo <code class=\"language-text\">__bases__</code> contém um objeto chamado object, como podemos ver abaixo:</p>\n<p><code class=\"language-text\">type(x).__bases__ (&lt;type ‘object’>,)</code></p>\n<p>Depois de tudo, podemos ver que temos vários atributos relacionados com esse objetos quando chamando a função dir. Então, igual vimos TUDO é um objeto. Podemos utilizar isso como uma regra geral de python, TUDO é um objeto. Sim, tudo. Até métodos e funções.</p>\n<p><code class=\"language-text\">dir(x) [‘__abs__’, ‘__add__’, ‘__and__’, ‘__class__’, ‘__cmp__’, ‘__coerce__’, ‘__delattr__’, ‘__div__’, ‘__divmod__’, ‘__doc__’, ‘__float__’, ‘__floordiv__’, ‘__format__’, ‘__getattribute__’, ‘__getnewargs__’, ‘__hash__’, ‘__hex__’, ‘__index__’, ‘__init__’, ‘__int__’, ‘__invert__’, ‘__long__’, ‘__lshift__’, ‘__mod__’, ‘__mul__’, ‘__neg__’, ‘__new__’, ‘__nonzero__’, ‘__oct__’, ‘__or__’, ‘__pos__’, ‘__pow__’, ‘__radd__’, ‘__rand__’, ‘__rdiv__’, ‘__rdivmod__’, ‘__reduce__’, ‘__reduce_ex__’, ‘__repr__’, ‘__rfloordiv__’, ‘__rlshift__’, ‘__rmod__’, ‘__rmul__’, ‘__ror__’, ‘__rpow__’, ‘__rrshift__’, ‘__rshift__’, ‘__rsub__’, ‘__rtruediv__’, ‘__rxor__’, ‘__setattr__’, ‘__sizeof__’, ‘__str__’, ‘__sub__’, ‘__subclasshook__’, ‘__truediv__’, ‘__trunc__’, ‘__xor__’, ‘bit_length’, ‘conjugate’, ‘denominator’, ‘imag’, ‘numerator’, ‘real’]</code></p>\n<h2 id=\"funções-e-métodos\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%B5es-e-m%C3%A9todos\" aria-label=\"funções e métodos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Funções e métodos</h2>\n<p>Sempre quando criamos funções, o python cria um objeto em cima da função. Quando colocamos funções dentro de uma classe elas ficam conhecidas como métodos. Como python tudo é um objeto, ele aceita apenas passagem-por-referência, isso significa que quando uma variável entra dentro de uma função ela é verdadeiramente modificada e não apenas sua cópia. Exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">um</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  dobra <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dobra</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  y <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> y</code></pre></div>\n<p>Com saída proveniente do programa <code class=\"language-text\">um()</code>, 2 e 4. Assim, o programa dobra() modificou verdadeiramente a variável.</p>\n<h2 id=\"definindo-uma-classe\" style=\"position:relative;\"><a href=\"#definindo-uma-classe\" aria-label=\"definindo uma classe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definindo uma classe</h2>\n<p>Uma classe é o que define todo o conceito de orientação a objetos, sua instâncias, métodos e outros. Em python uma classe de um certo objeto é o mesmo que seu tipo, já que TUDO é um objeto. Agora vamos mostrar como ela é utilizada em python. Vamos definir uma classe então:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Retangulo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> largura<span class=\"token punctuation\">,</span> comprimento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_largura <span class=\"token operator\">=</span> largura\n    self<span class=\"token punctuation\">.</span>_comprimento <span class=\"token operator\">=</span> comprimento\nAgora<span class=\"token punctuation\">,</span> vamos definir algumas instâncias com tipo Retângulo<span class=\"token punctuation\">:</span>\nc <span class=\"token operator\">=</span> Retangulo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> Retangulo<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ne <span class=\"token operator\">=</span> Retangulo<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>_largura<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>_largura<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>_largura<span class=\"token punctuation\">)</span></code></pre></div>\n<p>O que retorna como saída, 1, 2, 3. Ambas c e d se referem a duas instâncias diferentes da classe <code class=\"language-text\">Retangulo</code>. O atributo de instância object é acessado utilizando o operador . (ponto).</p>\n<p>Agora, o que seria esse método <code class=\"language-text\">__init__</code> utilizado para definir a classe?</p>\n<p>Esse é o construtor em python.</p>\n<p>Agora vamos definir como é feito o encapsulamento em python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Retangulo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">getLargura</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_largura\n  <span class=\"token keyword\">def</span> <span class=\"token function\">setLargura</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> valor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_largura <span class=\"token operator\">=</span> valor\n  largura <span class=\"token operator\">=</span> <span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span> fget <span class=\"token operator\">=</span> getLargura<span class=\"token punctuation\">,</span> fset <span class=\"token operator\">=</span> setLargura<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esses métodos criados são utilizados para prover acesso aos atributos. Exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c<span class=\"token punctuation\">.</span>setLargural<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>getLargura<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O que modifica a largura da instância c para 2.</p>\n<p>Agora o property é um atributo de classe para promover o get e o set. O argumento fget é uma propriedade específica do “getter” e o argumento fset é uma propriedade específica do “setter”. Seu uso é simples, como pode ser visto abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c<span class=\"token punctuation\">.</span>setLargura<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>getLargura<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">//</span>o que seria equivalente utilizando <span class=\"token builtin\">property</span> a<span class=\"token punctuation\">:</span>\nc<span class=\"token punctuation\">.</span>largura <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>largura<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Além disso, podemos também utilizar em python sobrecarga dos operadores, que determinaria outra ação para uma soma entre os objetos ou qualquer outra operação. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> Retangulo<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>largura <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>largura<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>comprimento <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>comprimento<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Assim quando utilizamos uma soma ele vai executar as ações definidas acima. Além desses podemos fazer para subtração <code class=\"language-text\">__sub__</code> e para multiplicação <code class=\"language-text\">__mul__</code>.</p>\n<p>Temos também em python métodos estatísticos. Eles são definidos da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@staticmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"oi\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"classes-aninhadas\" style=\"position:relative;\"><a href=\"#classes-aninhadas\" aria-label=\"classes aninhadas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes Aninhadas</h2>\n<p>Em python podemos definir uma classe dentro de outra. Dessa forma elas são conhecidas como aninhadas. Conforme o exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ponto</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutroPonto</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      selt<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>y</code></pre></div>\n<p>Python trata uma classe aninhada da mesma forma que uma classe não aninhada. Como pode ser visto:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">obj <span class=\"token operator\">=</span> Ponto<span class=\"token punctuation\">.</span>OutroPonto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"herança\" style=\"position:relative;\"><a href=\"#heran%C3%A7a\" aria-label=\"herança permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Herança</h2>\n<p>Primeiramente, o que seria o conceito de herança dentro do desenvolvimento orientado a objetos?</p>\n<p>Herança é o conceito no qual, você cria uma nova classe a partir de uma classe já existente. Herdando seus atributos e métodos.</p>\n<p>Isso ajuda você a escrever menos códigos repetitivos, por exemplo, quando temos bases, já vieram diversos atributos considerados úteis para uso em cada tipo de variável. Essa foi uma herança de object. Agora vamos ver como utilizá-la em python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  FEMALE <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  MALE <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nome<span class=\"token punctuation\">,</span> sexo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Pessoa<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>_nome <span class=\"token operator\">=</span> nome\n    self<span class=\"token punctuation\">.</span>_sexo <span class=\"token operator\">=</span> sexo\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_nome<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pais</span><span class=\"token punctuation\">(</span>Pessoa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nome<span class=\"token punctuation\">,</span> sexo<span class=\"token punctuation\">,</span> crianca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Pais<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>nome<span class=\"token punctuation\">,</span> sexo<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>_crianca <span class=\"token operator\">=</span> crianca\n  <span class=\"token keyword\">def</span> <span class=\"token function\">getCrianca</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_crianca<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Assim, um pai vai possuir todos os atributos de pessoa. O que evita que esses atributos sejam escritos novamente na classe Pais. Diferente de outras linguagens, também possuímos uma herança múltipla em python. Conforme visto a seguir:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Nada1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Nada2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Nada3</span><span class=\"token punctuation\">(</span>Nada1<span class=\"token punctuation\">,</span> Nada2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span></code></pre></div>\n<h2 id=\"exceções\" style=\"position:relative;\"><a href=\"#exce%C3%A7%C3%B5es\" aria-label=\"exceções permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Exceções</h2>\n<p>Em python temos um objeto Exception que pode ser definido uma ação quando ocorre uma exceção. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Excecao</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">raise</span> A\n<span class=\"token keyword\">def</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">except</span> A<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Um método levanta uma exceção usando o identificador raise: Um identificador raise é similar a um identificador return. Uma identificador return representa a terminação normal de um método e o objeto retornado combina o valor do retorno do método. Um identificador raise representa a terminação anormal de um método e o objeto levantado representa o tipo de erro encontrado. O método f levanta uma exceção de A.</p>\n<p>Os alimentadores da exceção são definidos usando um bloco try: O corpo do bloco try está executado qualquer um até que uma exceção esteja levantada ou até que termine normalmente. Um ou mais alimentadores de exceção seguem em um bloco try. Cada alimentador de exceção consiste na cláusula que especifica as exceções a serem travadas, e um bloco do código, que é executado quando a exceção ocorre. Quando o corpo do bloco try levanta uma exceção para que uma exceção está definida, o controle é transferido ao corpo do alimentador da exceção.</p>\n<h2 id=\"recomendações\" style=\"position:relative;\"><a href=\"#recomenda%C3%A7%C3%B5es\" aria-label=\"recomendações permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recomendações</h2>\n<p><a href=\"http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Types and Objects</a> de Shalabh Chaturvedi</p>\n<p><a href=\"http://www.cafepy.com/article/python_attributes_and_methods/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Attributes and Methods</a> de Shalabh Chaturvedi</p>\n<p><a href=\"https://docs.python.org/2/tutorial/classes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 2.x official documentation</a> about classes</p>\n<p><a href=\"https://docs.python.org/3/tutorial/classes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 3.x official documentation</a></p>\n<p><a href=\"http://legacy.python.org/dev/peps/pep-0252/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 252 — Making Types Look More Like Classes</a> and many other PEPs like PEP <a href=\"http://legacy.python.org/dev/peps/pep-3115/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">3115 — Metaclasses in Python 3000</a> and / <a href=\"http://legacy.python.org/dev/peps/pep-3119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 3119 — Introducing Abstract Base Classes</a> by Guido van Rossum and others</p>\n<p><a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python’s super() considered super!</a> and <a href=\"http://legacy.python.org/dev/peps/pep-3135/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 3135 — New Super</a> by Raymond Hettinger</p>\n<p><a href=\"http://www.rafekettler.com/magicmethods.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Guide to Python’s Magic Methods</a> by Rafe Kettler</p>\n<p><a href=\"http://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Improve Your Python: Python Classes and Object Oriented Programming</a> by Jeff Knupp</p>\n<p><a href=\"http://www.jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Drastically Improve Your Python: Understanding Python’s Execution Model</a> by Jeff Knupp</p>\n<p><a href=\"http://www.brianholdefehr.com/decorators-and-functional-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Decorators and Functional Python</a> by Brian Holdefehr (despite the title, it has to do with classes too)</p>\n<p><a href=\"http://python-history.blogspot.it/2013/10/origin-of-metaclasses-in-python.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Origin of metaclasses in Python</a> by Guido van Rossum</p>\n<p><a href=\"http://python-history.blogspot.it/2010/06/inside-story-on-new-style-classes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Inside Story on New-Style Classes</a> by Guido van Rossum</p>\n<p><a href=\"http://lgiordani.com/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OOP Concepts in Python 2.x</a> by Leonardo Giordani (series of 3 articles, superseded by the following one)</p>\n<p><a href=\"http://lgiordani.com/blog/2014/08/20/python-3-oop-part-1-objects-and-types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 3 OOP</a> by Leonardo Giordani (series of 6 articles)</p>\n<p><a href=\"http://lgiordani.com/blog/2015/03/14/python-3-oop-notebooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 3 OOP Notebooks</a> by Leonardo Giordani (IPython Notebooks version of the previous series of posts)</p>\n<p><a href=\"http://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Python metaclasses</a> by Ionel C. Mărieș</p>\n<h2 id=\"recomendações-de-livros-para-data-science-em-python\" style=\"position:relative;\"><a href=\"#recomenda%C3%A7%C3%B5es-de-livros-para-data-science-em-python\" aria-label=\"recomendações de livros para data science em python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recomendações de livros para data science em python</h2>\n<p><a href=\"https://github.com/donnemartin/data-science-ipython-notebooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Página do Github com diversos livros para data science em python</a>, spoiler, estão em inglês. :p</p>","fields":{"slug":"/posts/2015/programacao-orientada-a-objetos-com-python","tagSlugs":["/tag/python/","/tag/programacao-orientada-a-objetos/"]},"frontmatter":{"date":"2015-06-14T19:33:06.000Z","description":"Nesse guia você irá aprender os tipos fundamentais de python, funções e métodos, como definir uma classe, classes aninhadas, herança e exceções. Tudo o que é necessário para um bom inicio com python.","tags":["Python","Programação orientada a objetos"],"title":"Programação orientada a objetos com Python","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/2015/programacao-orientada-a-objetos-com-python"}}}